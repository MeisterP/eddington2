% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eddington-R6.r
\name{Eddington}
\alias{Eddington}
\title{An R6 Class for Tracking Eddington Numbers for Cycling}
\description{
The class will maintain a running tally, allowing for efficient
  updates as new rides come in.
}
\examples{
# Randomly generate a set of 15 rides
rides <- rgamma(15, shape = 2, scale = 10)

# View the rides sorted in decreasing order
setNames(sort(rides, decreasing = TRUE), seq_along(rides))

# Create the Eddington object
e <- Eddington$new(rides)

# Get the Eddington number
e$current

# Update with new data
e$update(rep(25, 10))

# See the new data
e$cumulative
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{current}}{The current Eddington number.}

\item{\code{cumulative}}{A vector of cumulative Eddington numbers.}

\item{\code{n2next}}{The number of rides needed to get to the next Eddington number.}

\item{\code{n}}{The number of rides in the data.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Eddington$new()}}
\item \href{#method-print}{\code{Eddington$print()}}
\item \href{#method-update}{\code{Eddington$update()}}
\item \href{#method-n2target}{\code{Eddington$n2target()}}
\item \href{#method-satisfied}{\code{Eddington$satisfied()}}
\item \href{#method-clone}{\code{Eddington$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
Create a new Eddington object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Eddington$new(rides)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{rides}}{A vector of rides}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new `Eddington` object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\subsection{Method \code{print()}}{
Print the current Eddington number.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Eddington$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update"></a>}}
\subsection{Method \code{update()}}{
Add new rides to the existing `Eddington` object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Eddington$update(rides)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{rides}}{A vector of rides}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-n2target"></a>}}
\subsection{Method \code{n2target()}}{
Get the number of rides of a specified length to get to a target
Eddington number.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Eddington$n2target(target)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{target}}{Target Eddington number}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An integer representing the number of rides of target length
  needed to achieve the target number.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-satisfied"></a>}}
\subsection{Method \code{satisfied()}}{
Test if an Eddington number is satisfied.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Eddington$satisfied(target)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{target}}{Target Eddington number}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Logical
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Eddington$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
